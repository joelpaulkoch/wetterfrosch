const std = @import("std");

const microzig = @import("microzig");
const display = @import("display.zig");
const rp2040 = microzig.hal;
const gpio = rp2040.gpio;
const time = rp2040.time;
const GlobalConfiguration = rp2040.pins.GlobalConfiguration;
const Pins = rp2040.pins.Pins;
const SPI = rp2040.spi.SPI;

const width = 122;
const height = 250;

const ws_lut = [159]u8{ 0x80, 0x4A, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x4A, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x4A, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x4A, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0x0, 0x0, 0xF, 0x0, 0x0, 0x2, 0xF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x0, 0x0, 0x0, 0x22, 0x17, 0x41, 0x0, 0x32, 0x36 };

const pin_config = GlobalConfiguration{
    .GPIO8 = .{
        .name = "dc",
        .direction = .out,
    },
    .GPIO9 = .{
        .name = "cs",
        .direction = .out,
    },
    .GPIO10 = .{ .name = "clk", .direction = .out, .function = .SPI1_SCK },
    .GPIO11 = .{ .name = "mosi", .direction = .out, .function = .SPI1_TX },
    .GPIO12 = .{
        .name = "rst",
        .direction = .out,
    },
    .GPIO13 = .{
        .name = "busy",
        .direction = .in,
    },
    .GPIO25 = .{
        .name = "led",
        .direction = .out,
    },
};

pub fn blink(pin: rp2040.GPIO) void {
    pin.put(1);
    time.sleep_ms(500);
    pin.put(0);
    time.sleep_ms(500);
}

pub fn main() !void {
    const pins = pin_config.apply();
    pins.cs.put(1);

    const spi = rp2040.spi.SPI.init(1, .{ .clock_config = rp2040.clock_config, .sck_pin = 10, .csn_pin = 9, .tx_pin = 11, .baud_rate = 4000 * 1000 });

    const epaper = display.Display{ .width = width, .height = height, .pin_config = pin_config, .lut = ws_lut };
    pins.led.put(1);
    time.sleep_ms(200);
    pins.led.put(0);
    epaper.init(pins, spi);
    pins.led.put(1);
    time.sleep_ms(5000);
    epaper.clear(pins, spi);
    // pins.led.put(0);
    // time.sleep_ms(5000);
    // pins.led.put(1);
    // display.display(pins, spi);
    time.sleep_ms(10000);
    // pins.led.put(0);
    // display.clear(pins, spi);

    var count: u2 = 0;
    while (count < 3) : (count += 1) {
        pins.led.put(1);
        time.sleep_ms(250);
        pins.led.put(0);
        time.sleep_ms(250);
    }
}

test "test test" {
    _ = 1;
    _ = @import("display.zig");
}
